from os.path import join, dirname
import warnings

import numpy
from numpy.testing import TestCase, assert_array_almost_equal, run_module_suite
import pandas

from sksurv.column import standardize

from sksurv.linear_model.coxph import CoxPHSurvivalAnalysis, CoxPHOptimizer

ROSSI_FILE = join(dirname(__file__), 'data', 'rossi.csv')


class TestCoxPH(TestCase):
    def setUp(self):
        data = pandas.read_csv(ROSSI_FILE)
        self.y = numpy.fromiter(zip(data["arrest"] == 1, data["week"]),
                                dtype=[('arrest', numpy.bool), ('week', numpy.float64)])

        self.x = data.drop(["arrest", "week"], axis=1)

    def test_likelihood(self):
        cph = CoxPHOptimizer(self.x.values, self.y['arrest'], self.y['week'], alpha=0.)

        w = pandas.Series({"fin": -0.37902189,
                           "age": -0.05724593,
                           "race": 0.31412977,
                           "wexp": -0.15111460,
                           "mar": -0.43278257,
                           "paro": -0.08498284,
                           "prio": 0.09111154})

        actual_loss = cph.nlog_likelihood(w.loc[self.x.columns].values)

        self.assertAlmostEqual(659.1206, self.x.shape[0] * actual_loss, 4)

    def test_fit(self):
        cph = CoxPHSurvivalAnalysis()
        cph.fit(self.x.values, self.y)

        expected = pandas.Series({"fin": -0.37902189,
                                  "age": -0.05724593,
                                  "race": 0.31412977,
                                  "wexp": -0.15111460,
                                  "mar": -0.43278257,
                                  "paro": -0.08498284,
                                  "prio": 0.09111154})

        actual = pandas.Series(cph.coef_, index=self.x.columns)
        assert_array_almost_equal(expected.values,
                                  actual.loc[expected.index].values)

    def test_predict(self):
        cph = CoxPHSurvivalAnalysis()
        xc = standardize(self.x, with_std=False)
        cph.fit(xc.values, self.y)

        expected = numpy.array([-0.136002823953217, -1.13104636905577, 0.741965816026403, -0.98072115186145,
                                -0.600098931134794, -0.997407014712788, -0.0993800739865776, -0.266761246895696,
                                -0.665145743277517, -0.418747210463951, -0.0770761787926419, 0.411385264707043,
                                -0.0770761787926419, 0.563114305747799, -1.07096133044073])

        idx = numpy.array([15, 77, 79, 90, 113, 122, 134, 172, 213, 219, 257, 313, 364, 395, 409])

        pred = cph.predict(xc.iloc[idx, :].values)

        assert_array_almost_equal(expected, pred)

    def test_fit_ridge_1(self):
        # coxph(Surv(week, arrest) ~ ridge(fin, age, race, wexp, mar, paro, prio,
        #     theta=1, scale=FALSE), data=rossi, ties="breslow")
        cph = CoxPHSurvivalAnalysis(alpha=1.0)
        cph.fit(self.x.values, self.y)

        expected = pandas.Series({'fin': -0.36366779384675196,
                                  'age': -0.057788417088377418,
                                  'race': 0.28960521422300672,
                                  'wexp': -0.15082851149160476,
                                  'mar': -0.3829568076550468,
                                  'paro': -0.08230383874483703,
                                  'prio': 0.090951189830228568})

        actual = pandas.Series(cph.coef_, index=self.x.columns)
        assert_array_almost_equal(expected.values,
                                  actual.loc[expected.index].values)

    def test_fit_ridge_2(self):
        # coxph(Surv(week, arrest) ~ ridge(fin, age, race, wexp, mar, paro, prio,
        #     theta=19.67, scale=FALSE), data=rossi, ties="breslow")
        cph = CoxPHSurvivalAnalysis(alpha=19.67)
        cph.fit(self.x.values, self.y)

        expected = pandas.Series({'fin': -0.21145000,
                                  'age': -0.06223214,
                                  'race': 0.11957591,
                                  'wexp': -0.10694088,
                                  'mar': -0.13696844,
                                  'paro': -0.04929119,
                                  'prio': 0.09029133})

        actual = pandas.Series(cph.coef_, index=self.x.columns)
        assert_array_almost_equal(expected.values,
                                  actual.loc[expected.index].values)

    def test_alpha(self):
        cph = CoxPHSurvivalAnalysis(alpha=-0.0001)

        self.assertRaisesRegex(ValueError, "alpha must be positive, but was -0\.0001",
                               cph.fit, self.x.values, self.y)

        cph.set_params(alpha=-1.25)
        self.assertRaisesRegex(ValueError, "alpha must be positive, but was -1\.25",
                               cph.fit, self.x.values, self.y)

    def test_convergence(self):
        cph = CoxPHSurvivalAnalysis(n_iter=1)

        with warnings.catch_warnings(record=True) as w:
            warnings.simplefilter("always")

            cph.fit(self.x.values, self.y)

            self.assertEqual(1, len(w))
            self.assertEqual("Optimization did not converge: Maximum number of iterations has been exceeded.",
                             str(w[0].message))

    def test_cum_baseline_hazard(self):
        cph = CoxPHSurvivalAnalysis()
        cph.fit(self.x.values, self.y)

        expected_x = numpy.array(
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30,
             31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52])
        assert_array_almost_equal(cph.cum_baseline_hazard_.x, expected_x)

        expected_y = numpy.array(
            [0.00678640369024364, 0.0135929334270716, 0.0204043079886091, 0.0272294776707967, 0.0340761479284598,
             0.0409513630548852, 0.0478644598407522, 0.0824874121212009, 0.096533196335404, 0.103576022547612,
             0.117797217724239, 0.13229957774496, 0.139567689198792, 0.161464121391667, 0.176251599922103,
             0.191124391501441, 0.213510322480229, 0.236290954886606, 0.251649773106939, 0.290325398473108,
             0.305965134135433, 0.313818453028679, 0.321716523315376, 0.35335069072333, 0.377266607384033,
             0.401708829897942, 0.418104688092493, 0.434591703603588, 0.45124335888492, 0.459626329898386,
             0.476473421812951, 0.493441590730406, 0.510649810315838, 0.54536240502959, 0.571724727186497,
             0.607219385133454, 0.616212515733231, 0.634272429676232, 0.670563043622984, 0.689028239653618,
             0.72608698374096, 0.744888154417096, 0.763829951751727, 0.802133842428817, 0.811813515937835,
             0.831261170527727, 0.880363253205648, 0.910240767958261, 0.950727380604515])

        actual_y = [cph.cum_baseline_hazard_(v) for v in expected_x]
        # check that values increase
        self.assertTrue((numpy.diff(actual_y) > 0).all())
        assert_array_almost_equal(actual_y, expected_y)

    def test_predict_cumulative_hazard_function(self):
        cph = CoxPHSurvivalAnalysis()
        xc = standardize(self.x, with_std=False)
        cph.fit(xc, self.y)

        test_idx = [9, 3, 313, 122, 431]
        f = cph.predict_cumulative_hazard_function(xc.values[test_idx, :])
        self.assertEqual(len(f), len(test_idx))

        expected_x = numpy.array(
            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30,
             31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52])
        assert_array_almost_equal(f[0].x, expected_x)

        expected_y = numpy.array([
            [0.00254216942097877, 0.00509187800740175, 0.00764340145273802, 0.010200092514897, 0.0127648376374983,
             0.0153402755947446, 0.0179299039244832, 0.0308995730701458, 0.0361610878212277, 0.0387993124614275,
             0.0441265357092526, 0.0495590825867252, 0.0522816985007711, 0.0604840458543902, 0.0660233973945142,
             0.0715947069840011, 0.0799804193276732, 0.0885139858140443, 0.0942673597370006, 0.108755149828895,
             0.114613754705306, 0.117555587825594, 0.120514184703119, 0.132364262699251, 0.141323103756249,
             0.150479097636328, 0.156620944074496, 0.1627969378097, 0.169034605180673, 0.172174844627085,
             0.178485722059738, 0.184841954627212, 0.191288109559384, 0.204291358530705, 0.214166616813619,
             0.227462824666768, 0.23083162832967, 0.237596825784311, 0.251191196714029, 0.258108211799492,
             0.271990322310271, 0.279033192636448, 0.286128741348309, 0.300477280578859, 0.30410326145516,
             0.311388302997746, 0.329781817263577, 0.340973857679346, 0.356140038962709],
            [0.000956575355883489, 0.00191598757220922, 0.00287608268924823, 0.00383812229309464, 0.00480319250366237,
             0.00577228624705267, 0.0067467195876016, 0.0116269867233485, 0.0136068057330369, 0.0145995250432739,
             0.0166040690489197, 0.0186482445550004, 0.0196727188742257, 0.0227591234521894, 0.0248434877463747,
             0.0269398773140096, 0.0300952790363686, 0.0333063157718797, 0.0354712130688363, 0.0409227234397632,
             0.0431272173646708, 0.0442341794108535, 0.045347449375349, 0.0498064332978417, 0.0531774936613566,
             0.0566227392976336, 0.0589338122315965, 0.0612577342158803, 0.0636048629461811, 0.0647864819371195,
             0.0671611583753846, 0.0695529011837649, 0.0719784802570701, 0.0768713829132565, 0.0805872755789716,
             0.0855904137074012, 0.0868580375471612, 0.0894036669255148, 0.094518998776647, 0.0971217545616966,
             0.10234535795047, 0.104995470933936, 0.107665405902953, 0.113064518529989, 0.114428913805359,
             0.117170151721572, 0.124091320039304, 0.12830269555009, 0.134009473052331],
            [0.00295687337931504, 0.00592251578772006, 0.00889026911287345, 0.0118640330478987, 0.0148471649018048,
             0.0178427339118856, 0.0208548081691458, 0.0359402187318172, 0.0420600440959181, 0.0451286421771019,
             0.051324895061419, 0.0576436530133163, 0.0608104091122242, 0.0703508049401599, 0.0767937905934741,
             0.0832739476109926, 0.0930276207497605, 0.102953267469424, 0.109645188965153, 0.126496371460824,
             0.133310690229679, 0.13673242442567, 0.140173657049699, 0.153956837619969, 0.16437713392766,
             0.175026744587659, 0.182170510098719, 0.189353993353509, 0.196609211060892, 0.200261717596116,
             0.207602088118528, 0.21499521255642, 0.222492928389435, 0.237617396652884, 0.249103605278338,
             0.264568822789954, 0.268487179209778, 0.27635598295447, 0.292168002868996, 0.300213390246307,
             0.316360088683985, 0.32455186206053, 0.332804907244929, 0.349494122893875, 0.353711609831828,
             0.362185059802043, 0.383579107042115, 0.396596904397598, 0.414237144002626],
            [0.000722773155807687, 0.00144768979833789, 0.00217312242980782, 0.00290002428464583, 0.00362921601781963,
             0.00436144786853125, 0.00509771423410398, 0.0087851666205712, 0.0102810864399135, 0.0110311693939413,
             0.0125457710277853, 0.0140903175943128, 0.0148643941291055, 0.0171964324397243, 0.0187713450166532,
             0.0203553436993314, 0.0227395151571085, 0.025165723547765, 0.02680148558334, 0.0309205602913373,
             0.0325862409105006, 0.0334226438625083, 0.0342638129774717, 0.0376329504547583, 0.0401800701587836,
             0.0427832430774134, 0.0445294531041597, 0.0462853716693838, 0.0480588248835527, 0.0489516374380368,
             0.0507459052630967, 0.0525530681665324, 0.0543857972146842, 0.0580827967998402, 0.0608904663181093,
             0.0646707580763963, 0.065628554529551, 0.0675519916827172, 0.0714170552371003, 0.0733836561964356,
             0.0773305280061372, 0.0793329113129253, 0.0813502717973751, 0.0854297556017638, 0.0864606710156758,
             0.0885319068752816, 0.0937614318009609, 0.0969434802924884, 0.101255430793218],
            [0.00139255604317491, 0.00278924190960753, 0.00418692192408016, 0.00558743266886364, 0.00699235528739893,
             0.00840313525414264, 0.00982168845928897, 0.0169262468721653, 0.0198084128294806, 0.0212535862454006,
             0.024171746170495, 0.0271476005418148, 0.0286390020247613, 0.033132104758687, 0.036166464860265,
             0.0392183310235561, 0.0438118778989689, 0.0484864166934194, 0.0516380145212199, 0.0595741730943763,
             0.0627834146020013, 0.0643948994447748, 0.0660155671812037, 0.0725068331013381, 0.0774143298837369,
             0.082429823541932, 0.0857942198339895, 0.0891773214194287, 0.0925942067462213, 0.0943143751118822,
             0.0977713636328095, 0.10125319690506, 0.104784288079377, 0.111907240934718, 0.11731673508027,
             0.124600165698393, 0.126445537552971, 0.130151394653205, 0.137598153801166, 0.141387173950061,
             0.14899155181893, 0.152849513272278, 0.156736331025966, 0.164596210407468, 0.16658245945132,
             0.170573078070673, 0.18064872418408, 0.186779528601685, 0.195087298030326]
        ])

        for i, ff in enumerate(f):
            actual_y = [ff(v) for v in expected_x]
            # check that values increase
            self.assertTrue((numpy.diff(actual_y) > 0).all())
            assert_array_almost_equal(actual_y, expected_y[i, :])


if __name__ == '__main__':
    run_module_suite()
